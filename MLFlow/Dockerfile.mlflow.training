# ===========================================
# Dockerfile.training - Container d'entra√Ænement ML optimis√©
# ===========================================

FROM python:3.9-slim AS builder

# Arguments de build
ARG PYTHON_VERSION=3.9
ARG MLFLOW_VERSION=2.8.0
ARG INSTALL_GPU_SUPPORT=false

# M√©tadonn√©es
LABEL maintainer="ML Team"
LABEL description="Optimized ML training container with MLflow"
LABEL version="1.0"

# Installation des d√©pendances de build et librairies syst√®mes
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Compilateurs et outils de build
    gcc \
    g++ \
    gfortran \
    make \
    cmake \
    # D√©pendances Python
    python3-dev \
    libpython3-dev \
    # Librairies math√©matiques
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    # Librairies pour ML
    libffi-dev \
    libssl-dev \
    libhdf5-dev \
    libnetcdf-dev \
    # Outils syst√®me
    git \
    curl \
    wget \
    unzip \
    # Nettoyage
    && rm -rf /var/lib/apt/lists/*

# Cr√©ation d'un environnement virtuel optimis√©
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade des outils de base
RUN pip install --no-cache-dir --upgrade \
    pip \
    setuptools \
    wheel \
    cython \
    numpy

# Installation des packages ML core (dans l'ordre optimal)
COPY requirements.mlflow.training.txt .
RUN pip install --no-cache-dir -r requirements.mlflow.training.txt

# Installation conditionnelle du support GPU
RUN if [ "$INSTALL_GPU_SUPPORT" = "true" ]; then \
    pip install --no-cache-dir \
    torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 \
    tensorflow-gpu \
    cupy-cuda11x; \
    fi

# ===========================================
# Image finale (runtime optimis√©e)
# ===========================================
FROM python:3.9-slim

# Variables d'environnement pour optimisation
ENV PYTHON_ENV=training \
    APP_NAME=ml-training \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=0 \
    PYTHONIOENCODING=utf-8

# Variables d'optimisation ML
ENV OMP_NUM_THREADS=4 \
    OPENBLAS_NUM_THREADS=4 \
    MKL_NUM_THREADS=4 \
    NUMBA_NUM_THREADS=4 \
    JOBLIB_TEMP_FOLDER=/tmp

# Variables MLflow
ENV MLFLOW_TRACKING_URI=http://mlflow-tracking:5000 \
    MLFLOW_ARTIFACT_ROOT=/app/mlruns \
    MLFLOW_EXPERIMENT_NAME=default \
    MLFLOW_RUN_NAME="" \
    MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING=true

# Installation des d√©pendances runtime minimales
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Librairies runtime math√©matiques
    libblas3 \
    liblapack3 \
    libatlas3-base \
    libhdf5-103 \
    # Outils syst√®me essentiels
    curl \
    wget \
    git \
    procps \
    htop \
    tree \
    # Outils de monitoring
    iotop \
    nethogs \
    # Nettoyage
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Cr√©ation de l'utilisateur non-root optimis√©
RUN groupadd -r mltrainer --gid=1001 \
    && useradd -r -g mltrainer --uid=1001 \
    --no-log-init \
    --create-home \
    --home-dir /home/mltrainer \
    --shell /bin/bash \
    mltrainer

# Copie de l'environnement virtuel optimis√©
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Cr√©ation de la structure de r√©pertoires optimis√©e
RUN mkdir -p \
    /app/src \
    /app/data \
    /app/models \
    /app/experiments \
    /app/logs \
    /app/cache \
    /app/temp \
    /app/config \
    /app/scripts \
    /tmp/mlflow \
    && chown -R mltrainer:mltrainer /app /tmp/mlflow

# Configuration du cache et des r√©pertoires temporaires
ENV TMPDIR=/app/temp \
    MPLCONFIGDIR=/app/cache/matplotlib \
    TRANSFORMERS_CACHE=/app/cache/transformers \
    HF_HOME=/app/cache/huggingface

# Copie des scripts d'entra√Ænement
USER root
COPY scripts/training_entrypoint.sh scripts/
COPY src/train_model.py src/
COPY src/utils/ src/utils/
COPY config/ config/

# Configuration des permissions et format de ligne
RUN chmod 755 scripts/training_entrypoint.sh && \
    sed -i 's/\r$//' scripts/training_entrypoint.sh && \
    chown -R mltrainer:mltrainer /app

USER mltrainer
WORKDIR /app

# Configuration de l'environnement Python optimis√©
RUN python -c "import matplotlib.pyplot as plt; plt.ioff(); import seaborn as sns" \
    && python -c "import sklearn; print('Scikit-learn version:', sklearn.__version__)" \
    && python -c "import mlflow; print('MLflow version:', mlflow.__version__)"

# Cr√©ation de fichiers de configuration par d√©faut
RUN echo '# ML Training Configuration' > config/training_config.yaml \
    && echo 'model:' >> config/training_config.yaml \
    && echo '  type: RandomForestRegressor' >> config/training_config.yaml \
    && echo '  hyperparameter_tuning: true' >> config/training_config.yaml \
    && echo 'data:' >> config/training_config.yaml \
    && echo '  synthetic: true' >> config/training_config.yaml \
    && echo '  n_samples: 2000' >> config/training_config.yaml \
    && echo 'mlflow:' >> config/training_config.yaml \
    && echo '  auto_register: true' >> config/training_config.yaml \
    && echo '  stage: Staging' >> config/training_config.yaml

# Configuration bash pour un meilleur UX
RUN echo 'export PS1="ü§ñ [ML-Training] \w $ "' >> ~/.bashrc \
    && echo 'alias train="python src/train_model_synthetic.py"' >> ~/.bashrc \
    && echo 'alias trainreal="python src/train_model.py"' >> ~/.bashrc \
    && echo 'alias logs="tail -f /app/logs/training.log"' >> ~/.bashrc \
    && echo 'alias models="ls -la /app/models/"' >> ~/.bashrc \
    && echo 'export PYTHONPATH=/app:$PYTHONPATH' >> ~/.bashrc

# Health check optimis√© pour l'entra√Ænement
HEALTHCHECK --interval=60s --timeout=30s --start-period=60s --retries=3 \
    CMD python -c "import mlflow; mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI'); print('Training service healthy')" || exit 1

# Point d'entr√©e avec script de configuration
ENTRYPOINT ["/bin/bash", "/app/scripts/training_entrypoint.sh"]

# Commande par d√©faut - mode interactif
CMD ["bash"]