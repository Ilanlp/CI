
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'projet_dbt'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'projet_dbt'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  projet_dbt:
    +python: true
    src_py:                      # sous-répertoire `models/src/`
      # Les étapes intermédiaires
      matched_lieu_py:
        materialized: table  
      matched_contrat_py:
        materialized: table
      matched_lieu_py2:
        materialized: table
    
               
    
      # … ajoutez un fichier par matching
      # Le modèle final
      fait_offres_py:            # nom du fichier sans extension
        materialized: incremental
        unique_key: id_local
        incremental_strategy: merge
        merge_update_columns: ['id_lieu', 'id_contrat']  # ne fait que des INSERT, jamais de UPDATE
        post-hook:
            - "DROP TABLE IF EXISTS {{ ref('matched_lieu_py') }}"
            - "DROP TABLE IF EXISTS {{ ref('matched_contrat_py') }}"

        
    # Config indicated by + and applies to all files under models/example/
    example:
      +materialized: view
    
